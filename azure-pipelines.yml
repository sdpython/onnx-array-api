jobs:
- job: 'TestLinuxWheelPip'
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      Python311-Linux:
        python.version: '3.11'
    maxParallel: 3

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - script: sudo apt-get update
    displayName: 'AptGet Update'
  - script: sudo apt-get install -y graphviz
    displayName: 'Install Graphviz'
  - script: python -m pip install --upgrade pip setuptools wheel
    displayName: 'Install tools'
  - script: pip install -r requirements.txt
    displayName: 'Install Requirements'
  - script: pip install -r requirements-dev.txt
    displayName: 'Install Requirements dev'
  - script: |
      ruff .
    displayName: 'Ruff'
  - script: |
      black --diff .
    displayName: 'Black'
  - script: |
      python -m pip wheel . --wheel-dir dist -v -v -v
    displayName: 'build wheel'
  - script: |
      python -m pip install . -v -v -v
    displayName: 'install wheel'
  - script: |
      python -m pytest -v
    displayName: 'Runs Unit Tests'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'wheel-linux-wheel-$(python.version)'
      targetPath: 'dist'

- job: 'TestLinuxNightly'
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      Python310-Linux:
        python.version: '3.11'
    maxParallel: 3

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - script: sudo apt-get update
    displayName: 'AptGet Update'
  - script: sudo apt-get install -y pandoc
    displayName: 'Install Pandoc'
  - script: sudo apt-get install -y inkscape
    displayName: 'Install Inkscape'
  - script: sudo apt-get install -y graphviz
    displayName: 'Install Graphviz'
  - script: python -m pip install --upgrade pip setuptools wheel
    displayName: 'Install tools'
  - script: pip install -r requirements.txt
    displayName: 'Install Requirements'
  - script: pip install -r requirements-dev.txt
    displayName: 'Install Requirements dev'
  - script: pip uninstall -y scikit-learn
    displayName: 'Uninstall scikit-learn'
  - script: pip install --pre --extra-index https://pypi.anaconda.org/scipy-wheels-nightly/simple scikit-learn
    displayName: 'Install scikit-learn nightly'
  - script: pip install onnxmltools --no-deps
    displayName: 'Install onnxmltools'
  - script: |
      ruff .
    displayName: 'Ruff'
  - script: |
      rstcheck -r ./_doc ./onnx_array_api
    displayName: 'rstcheck'
  - script: |
      black --diff .
    displayName: 'Black'
  - script: |
      python -m pytest -v
    displayName: 'Runs Unit Tests'

- job: 'TestLinuxArrayApi'
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      Python310-Linux:
        python.version: '3.11'
    maxParallel: 3

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - script: sudo apt-get update
    displayName: 'AptGet Update'
  - script: python -m pip install --upgrade pip setuptools wheel
    displayName: 'Install tools'
  - script: pip install -r requirements.txt
    displayName: 'Install Requirements'
  - script: python setup.py install
    displayName: 'Install onnx_array_api'
  - script: |
      git clone https://github.com/data-apis/array-api-tests.git
    displayName: 'clone array-api-tests'
  - script: |
      cd array-api-tests
      git submodule update --init --recursive
      cd ..
    displayName: 'get submodules for array-api-tests'
  - script: pip install -r array-api-tests/requirements.txt
    displayName: 'Install Requirements dev'
  - script: |
      export ARRAY_API_TESTS_MODULE=onnx_array_api.array_api.onnx_numpy
      cd array-api-tests
      python -m pytest -xv array_api_tests/test_creation_functions.py::test_zeros
      cd ..
    displayName: "test_creation_functions.py::test_zeros"
  - script: |
      export ARRAY_API_TESTS_MODULE=onnx_array_api.array_api.onnx_numpy
      cd array-api-tests
      python -m pytest -x array_api_tests
      cd ..
    displayName: "all tests"

- job: 'TestLinux'
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      Python310-Linux:
        python.version: '3.11'
    maxParallel: 3

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - script: sudo apt-get update
    displayName: 'AptGet Update'
  - script: sudo apt-get install -y pandoc
    displayName: 'Install Pandoc'
  - script: sudo apt-get install -y inkscape
    displayName: 'Install Inkscape'
  - script: sudo apt-get install -y graphviz
    displayName: 'Install Graphviz'
  - script: python -m pip install --upgrade pip setuptools wheel
    displayName: 'Install tools'
  - script: pip install -r requirements.txt
    displayName: 'Install Requirements'
  - script: pip install -r requirements-dev.txt
    displayName: 'Install Requirements dev'
  - script: pip install onnxmltools --no-deps
    displayName: 'Install onnxmltools'
  - script: |
      ruff .
    displayName: 'Ruff'
  - script: |
      rstcheck -r ./_doc ./onnx_array_api
    displayName: 'rstcheck'
  - script: |
      black --diff .
    displayName: 'Black'
  - script: |
      python -m pytest -v
    displayName: 'Runs Unit Tests'
  - script: |
      python -u setup.py bdist_wheel
    displayName: 'Build Package'
  #- script: |
  #    python -m sphinx _doc dist/html
  #  displayName: 'Builds Documentation'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'wheel-linux-$(python.version)'
      targetPath: 'dist'

- job: 'TestWindows'
  pool:
    vmImage: 'windows-latest'
  strategy:
    matrix:
      Python310-Windows:
        python.version: '3.11'
    maxParallel: 3

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - script: python -m pip install --upgrade pip setuptools wheel
    displayName: 'Install tools'
  - script: pip install -r requirements.txt
    displayName: 'Install Requirements'
  - script: pip install -r requirements-dev.txt
    displayName: 'Install Requirements dev'
  - script: pip install onnxmltools --no-deps
    displayName: 'Install onnxmltools'
  - script: |
      python -m pytest -v
    displayName: 'Runs Unit Tests'
  - script: |
      python -u setup.py bdist_wheel
    displayName: 'Build Package'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'wheel-windows-$(python.version)'
      targetPath: 'dist'

- job: 'TestMac'
  pool:
    vmImage: 'macOS-latest'
  strategy:
    matrix:
      Python310-Mac:
        python.version: '3.11'
    maxParallel: 3

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - script: gcc --version
    displayName: 'gcc version'
  - script: |
          brew update
    displayName: 'brew update'
  - script: export
    displayName: 'export'
  - script: gcc --version
    displayName: 'gcc version'
  - script: brew install llvm
    displayName: 'install llvm'
  - script: brew install libomp
    displayName: 'Install omp'
  - script: brew install p7zip
    displayName: 'Install p7zip'
  - script: python -m pip install --upgrade pip setuptools wheel
    displayName: 'Install tools'
  - script: brew install pybind11
    displayName: 'Install pybind11'
  - script: pip install -r requirements.txt
    displayName: 'Install Requirements'
  - script: pip install -r requirements-dev.txt
    displayName: 'Install Requirements dev'
  - script: pip install onnxmltools --no-deps
    displayName: 'Install onnxmltools'
  - script: |
      python -m pytest -v -v
    displayName: 'Runs Unit Tests'
  - script: |
      python -u setup.py bdist_wheel
    displayName: 'Build Package'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'wheel-mac-$(python.version)'
      targetPath: 'dist'

